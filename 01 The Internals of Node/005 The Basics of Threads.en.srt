1
00:00:00,550 --> 00:00:05,980
In the last few sections we got a better idea of how Noda works and now understand the Noda internally

2
00:00:05,980 --> 00:00:12,760
uses the javascript V8 engine and the C++ library lib U.V. to work correctly in this video.

3
00:00:12,760 --> 00:00:18,550
And the next few We're going to start to dive into something called the event loop the event loop is

4
00:00:18,610 --> 00:00:24,550
used by node to handle asynchronous code that you and I right inside of our applications before going

5
00:00:24,550 --> 00:00:29,950
straight into the event loop however we're going to do a very brief detour and discuss something called

6
00:00:30,100 --> 00:00:36,120
threads once we understand what a thread is we'll then go back over to the node event loop.

7
00:00:36,130 --> 00:00:37,850
So in this video let's get to it.

8
00:00:37,870 --> 00:00:41,440
We're going to start to discuss threads and what they are.

9
00:00:41,470 --> 00:00:41,810
All right.

10
00:00:41,880 --> 00:00:48,710
Curium whenever you and I run programs on our on our computer we start up something called a process.

11
00:00:48,940 --> 00:00:55,660
A process is an instance of a computer program that has been executed within a single process.

12
00:00:55,660 --> 00:00:58,870
We can have multiple things called threats.

13
00:00:58,930 --> 00:01:05,050
You can picture a thread right here as being like a little to do list that has some number of instructions

14
00:01:05,230 --> 00:01:08,550
that need to be executed by the CPQ of your computer.

15
00:01:09,590 --> 00:01:16,190
This thread is given to the CPQ and the CPP you will attempt to run every instruction on it one by one

16
00:01:16,400 --> 00:01:23,650
starting at the top and then going down a single process can have multiple threads inside of it.

17
00:01:23,830 --> 00:01:29,480
And in fact I can actually very easily prove that to you by opening up the activity monitor on my personal

18
00:01:29,480 --> 00:01:30,890
laptop.

19
00:01:30,890 --> 00:01:32,670
So here's my activity monitor.

20
00:01:32,710 --> 00:01:36,580
It lists out all the different processes that are being ran on my computer.

21
00:01:37,070 --> 00:01:41,540
If you look at the bottom right over here and I know that text is really small but you can see that

22
00:01:41,540 --> 00:01:45,230
I've got about 250 different processes running right now.

23
00:01:45,230 --> 00:01:50,030
And inside there there are about 4500 different threats.

24
00:01:50,150 --> 00:01:58,250
So every one of these threads belongs to one individual process one of the most interesting and important

25
00:01:58,250 --> 00:02:04,220
areas of study around threads is understanding something called scheduling scheduling or first your

26
00:02:04,220 --> 00:02:10,730
operating systems ability to decide which thread to process at any given instant in time.

27
00:02:11,330 --> 00:02:16,840
So remember your computer has a limited amount of resources available to it in your sleep.

28
00:02:16,840 --> 00:02:21,020
You can only process so many instructions per second.

29
00:02:21,020 --> 00:02:27,440
This starts to get really relevant when we have many active processes and threads on our computer each

30
00:02:27,440 --> 00:02:32,210
one of these threads right here might have some urgent responsibility assigned to it like over here

31
00:02:32,210 --> 00:02:37,430
we might have a thread that is responsible for making sure that whenever the user moves their mouse

32
00:02:37,770 --> 00:02:39,950
the cursor on the screen moves as well.

33
00:02:40,340 --> 00:02:45,680
Or we might have another thread whose job is to make sure that keyboard typing or keyboard input shows

34
00:02:45,680 --> 00:02:49,240
up inside of some text input whenever the user types.

35
00:02:49,670 --> 00:02:55,430
So your operating systems scheduler over here has to look at all these different threads that are asking

36
00:02:55,430 --> 00:03:00,950
to be processed and figure out how to do some amount of work on each of them while making sure that

37
00:03:01,250 --> 00:03:04,400
they don't have to wait too long to be processed.

38
00:03:04,400 --> 00:03:06,360
Now that last part is really important.

39
00:03:06,500 --> 00:03:12,230
We want to make sure that urgent threads don't have to wait too long to be executed.

40
00:03:12,230 --> 00:03:18,470
So for example if the thread in charge of moving the mouse around the screen has to wait like five seconds

41
00:03:18,470 --> 00:03:24,170
before it gets processed the cursor will not move during that time and the user is going to think that

42
00:03:24,170 --> 00:03:29,400
their computer is broken which is obviously not good at all.

43
00:03:29,420 --> 00:03:34,610
There are a couple of different strategies that are used to improve the rate at which these threads

44
00:03:34,610 --> 00:03:36,200
can be processed.

45
00:03:36,200 --> 00:03:40,730
We're going to focus on two in particular that are going to end up being very relevant for us in the

46
00:03:40,730 --> 00:03:42,120
know G-S world.

47
00:03:42,500 --> 00:03:50,510
So in order to more quickly process threads or process more at one given time we can first add in additional

48
00:03:50,510 --> 00:03:52,770
seat cores to our machine.

49
00:03:52,850 --> 00:03:58,850
So if we have more than one core inside of our CPQ then we can easily process multiple threads at the

50
00:03:58,850 --> 00:04:00,590
same time.

51
00:04:00,590 --> 00:04:06,470
One thing I want to mention here is that technically one core can process more than one threaded time

52
00:04:06,710 --> 00:04:11,390
through a process called multi-threading or you may have also heard it referred to as hyper threading

53
00:04:11,390 --> 00:04:12,020
as well.

54
00:04:12,350 --> 00:04:19,000
But right now let's just say that one more cores means more threads processed at once.

55
00:04:19,010 --> 00:04:24,030
The second thing we can do is more closely examine the work that is being done by each thread.

56
00:04:24,320 --> 00:04:28,790
So this is where things start to get really relevant for us in the javascript world.

57
00:04:28,880 --> 00:04:34,100
Let's imagine for a second that we have two threads here that are both competing for processing power

58
00:04:34,640 --> 00:04:35,140
thread.

59
00:04:35,190 --> 00:04:40,040
Number one has a set of instructions that want to read a file off the hard drive and then maybe count

60
00:04:40,040 --> 00:04:47,450
the number of characters inside of it and then thread number two over here wants to multiply 3 by 3.

61
00:04:47,540 --> 00:04:53,690
The thing to keep in mind is that any time our computer tries to read data off of some type of medium

62
00:04:53,810 --> 00:05:01,220
like a hard drive we refer to that as input or output operations and it always takes some non zero amount

63
00:05:01,220 --> 00:05:02,660
of time.

64
00:05:02,660 --> 00:05:09,260
So during this IO phase right here you're CPQ is waiting on the hard drive to read some file and return

65
00:05:09,260 --> 00:05:10,230
its contents.

66
00:05:10,340 --> 00:05:15,750
And during that time this thread thread number one has absolutely nothing else to do.

67
00:05:15,950 --> 00:05:20,230
It's just sitting there waiting for the hard drive to get some information.

68
00:05:20,330 --> 00:05:25,790
Your operating system scheduler has the ability to detect this downtime or this kind of pause between

69
00:05:25,820 --> 00:05:32,240
instructions and it can decide to put thread number one on pause and then execute.

70
00:05:32,240 --> 00:05:37,550
Thread number two and then as soon as thread number two is complete it can go back over to threat number

71
00:05:37,550 --> 00:05:42,290
one and continue waiting on the harddrive to be read from the person to the file to be read from the

72
00:05:42,290 --> 00:05:43,450
hard drive.

73
00:05:44,090 --> 00:05:49,190
OK so a quick recap here in this section we spoke about some of the basics of threads.

74
00:05:49,250 --> 00:05:55,640
Threads are units of instruction that are waiting to be executed by the CPQ deciding which order to

75
00:05:55,640 --> 00:05:58,900
execute these threads in is referred to as scheduling.

76
00:05:59,330 --> 00:06:05,510
Scheduling is controlled by your operating system to ways of improving the rate at which we process

77
00:06:05,510 --> 00:06:12,770
threads is to either add more CQ course to our machine or to allow our OS scheduler to detect big pauses

78
00:06:12,980 --> 00:06:18,150
in processing time due to expensive input and output operations.

79
00:06:18,170 --> 00:06:22,220
So now that we understand or understand a little bit more about threads Let's continue into the next

80
00:06:22,220 --> 00:06:26,470
section and we're going to start to apply this knowledge to the node event loop.

81
00:06:26,480 --> 00:06:29,020
So quick break and I'll see you in just a minute.
