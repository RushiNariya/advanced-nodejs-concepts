1
00:00:00,640 --> 00:00:05,070
En la última sección, actualizamos el número de subprocesos que se crean fuera de nuestro grupo de subprocesos

2
00:00:05,070 --> 00:00:09,420
y observamos lo que realmente ocurrió en esta sección, vamos a abordar un par de preguntas que probablemente

3
00:00:09,420 --> 00:00:14,220
haya tenido en torno a la existencia de este grupo de subprocesos, así que Voy a sacar un par de

4
00:00:14,220 --> 00:00:15,930
preguntas que vamos a revisar cada una.

5
00:00:15,960 --> 00:00:16,780
Aquí vamos.

6
00:00:17,220 --> 00:00:17,450
DE ACUERDO.

7
00:00:17,460 --> 00:00:20,940
Entonces en el lado izquierdo tenemos una pregunta en el lado derecho como una posible respuesta.

8
00:00:20,940 --> 00:00:24,780
Así que la primera pregunta que probablemente tengas y esta es probablemente la más obvia.

9
00:00:24,870 --> 00:00:31,290
¿Podemos usar un grupo de subprocesos para nuestro propio código de JavaScript personal o solo ciertas funciones de jazz

10
00:00:31,470 --> 00:00:34,730
conocidas como PBK tienen que funcionar para acceder a ellas?

11
00:00:34,730 --> 00:00:39,780
La respuesta a eso es que usted y yo podemos escribir el código de JavaScript que hace uso de ese

12
00:00:39,780 --> 00:00:43,480
grupo de subprocesos y veremos exactamente cómo hacerlo más adelante en un par de videos.

13
00:00:43,530 --> 00:00:49,020
Entonces sí, descubriremos cómo podemos ejecutar nuestro propio código de JavaScript en amenazas separadas.

14
00:00:49,020 --> 00:00:55,250
La segunda pregunta que podríamos tener es qué funciones dentro de la biblioteca estándar del nodo realmente no usan.

15
00:00:55,330 --> 00:01:01,150
Así que este es un poco más complicado y no puedo darle una respuesta muy clara de exactamente

16
00:01:01,150 --> 00:01:05,350
qué funciones se ejecutan dentro de ese grupo de subprocesos y cuáles no.

17
00:01:05,350 --> 00:01:09,990
Y la razón es que mucho depende del sistema operativo en el que se encuentre.

18
00:01:10,000 --> 00:01:15,520
Entonces, dependiendo de si usted estaba o no en Windows o en un sistema basado en UNIX,

19
00:01:15,520 --> 00:01:18,650
verá diferentes funciones para acceder al grupo de subprocesos.

20
00:01:18,670 --> 00:01:24,340
Ahora, el hilo común es que todas las funciones del módulo del sistema de archivos, como todas las funciones dentro del

21
00:01:24,340 --> 00:01:27,490
sistema de archivos, hacen uso de lo que el grupo de subprocesos.

22
00:01:27,490 --> 00:01:31,090
No importa qué sistema operativo esté ejecutando.

23
00:01:31,290 --> 00:01:36,920
Ahora la última pregunta que puede tener aquí es cómo encaja el conjunto de subprocesos en el ciclo.

24
00:01:36,920 --> 00:01:41,990
Recuerda que escribimos algún tipo de código de prueba similar hace un momento o un pseudo código para simular cómo

25
00:01:41,990 --> 00:01:43,130
funciona el ciclo de eventos.

26
00:01:43,130 --> 00:01:47,890
Es posible que tenga curiosidad por saber qué presenta este grupo de subprocesos y todo ese pseudo código que escribimos.

27
00:01:48,200 --> 00:01:53,960
Bueno, quizás recuerdes que teníamos ese arreglo de operaciones pendientes dentro de nuestro ejemplo de pseudo código.

28
00:01:54,290 --> 00:01:55,730
Así que aquí está nuestra cosa de hilo.

29
00:01:55,940 --> 00:02:00,200
Y en la parte superior habíamos definido esa matriz de operaciones pendientes aquí.

30
00:02:00,200 --> 00:02:04,050
Y luego, en cualquier momento que quisiéramos verificar para ver si nuestros bucles de eventos deberían continuar ejecutándose.

31
00:02:04,160 --> 00:02:09,490
Verificamos si quedaba alguna operación pendiente dentro de ese grupo de subprocesos.

32
00:02:09,560 --> 00:02:15,200
Entonces, esta operación de operaciones pendientes aquí representa esencialmente el código que se está ejecutando o que se

33
00:02:15,330 --> 00:02:17,590
está ejecutando dentro del grupo de subprocesos.

34
00:02:17,840 --> 00:02:23,450
Así que mientras ese grupo de subprocesos todavía tenga algún código dentro de él o algunas tareas estén alineadas

35
00:02:23,840 --> 00:02:27,190
para que se ejecute, nuestro programa continuará ejecutando el ciclo de eventos.

36
00:02:27,920 --> 00:02:33,560
Y luego puede recordar que dentro del bucle de eventos en el Paso número dos aquí mismo, dijimos que

37
00:02:33,560 --> 00:02:38,680
ese nodo mira la matriz de operaciones pendientes y llama a todas las devoluciones de llamada relevantes.

38
00:02:38,900 --> 00:02:45,320
Entonces, después de que terminamos de calcular uno de nuestros valores hash dentro de uno de esos hilos, la devolución

39
00:02:45,500 --> 00:02:51,800
de llamada que habíamos registrado con el PV KDAF para funcionar se ejecuta luego cuando pasamos por el paso número

40
00:02:51,800 --> 00:02:52,880
dos aquí mismo.

41
00:02:53,270 --> 00:02:56,770
Así que así es como todo se relaciona con el ciclo de eventos.

42
00:02:57,320 --> 00:03:00,730
Ok, entonces ahora tenemos algunas de estas preguntas del camino probablemente comunes.

43
00:03:00,860 --> 00:03:05,330
Continuemos con la siguiente sección y comenzaremos a profundizar en esa otra matriz de la que

44
00:03:05,330 --> 00:03:06,040
no hemos hablado.

45
00:03:06,050 --> 00:03:09,470
Recuerda que aquí también tuvimos esa cosa pendiente de las tareas del sistema operativo.

46
00:03:09,470 --> 00:03:14,130
Entonces, un breve descanso y comenzaremos a sumergirnos en lo que este conjunto de pares significa también.

47
00:03:14,180 --> 00:03:15,830
Así que te veremos en solo un minuto.
